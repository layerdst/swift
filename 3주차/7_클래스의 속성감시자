### 속성감시자
- 어떤 속성이 변하는 시점을 알아차리도록 시점에 제약을 만드는 코드를 짜기 어렵기 때문에, 실제 앱을 만들고 활용할때 쓰임
- 일반적으로 willSet, didSet 둘중 하나만 구현하며, 주로 didSet 이 많이 쓰인다
	- willSet : 메모리 변경 직전, 값이 저장되기 직전
	- didSet : 메모리 변경 직후, 새 값이 저장된 직후
- 클래스, 구조체, 열거형은 동일하게 적용된다
- 기본적으로 저장속성에 사용하며, 계산속성에서는 상속하여 재정의 하는 경우에만 가능하다

- let 속성에는 당연히 추가할 수 없다(값이 변하지 않으므로, 관찰할 필요가 없기 때문이다)
- 지연 저장속성에 안됨
```swift
class profile{
	var name : String = "이름"

	// 저장 속성 -> 저장속성이 변하는 시점을 관찰하는 메서드
	var statusMsg : String = "기본상태 메세지" {
		willSet(msg){ // 저장속성의 값이 어떻게 변경되는지 관찰함
			print("메세지가 \(statusMsg) 에서 \(msg) 로 변경될 예정입니다" )
			//print("메세지가 \(statusMsg) 에서 \(newValue) 로 변경될 예정입니다" )
			// 새로운 메세지는 newValue
			print("상태메세지 업데이트 준비" )
		}
		didSet(msg){
			print("메세지가 \(statusMsg) 에서 \(msg) 로 변경되었습니다" )
			//print("메세지가 \(oldValue) 에서 \(msg) 로 변경되었습니다" ) 
			// 이전 메세지는 oldValue 로 사용
			print("상태메세지 업데이트 완료" )
		}
	}

	init(msg : String){
		self.statusMsg = msg
	}
}
```

- 속성감시자의 구현
```swift
var x = 0

func willSetting(newValue : Int ){
	print(newValue)
}

func didlSetting(oldValue : Int){
	print(oldValue)
}

func setX(newX : Int){
	willSetting(newValue : newX)
	x = newX
	didSetting(oldValue : newX)
}


```


- 계산 속성의 경우 속성 관찰자를 만드는 대신에 계산 속성의 set 블록에서 값 변경을 관찰할 수 있기 때문에 본래의 계산 속성에는 추가 불가
```swift
class Test {
	 var name : String {
		 get {
			 return "안녕"
		 }
		 set{
			 print("값이 \(newValue) 변경될 예정입니다" )
			 name = newValue
		 }
	 }
}
```
